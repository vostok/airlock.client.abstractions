<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using JetBrains.Annotations;

namespace Vostok.Hercules.Client.Abstractions.Events
{
    public partial interface IHerculesTagsBuilder
    {
<#
    foreach (var type in new [] { 
        "byte",
        "bool",
        "short",
        "int",
        "long",
        "float",
        "double",
        "Guid",
        "string"
    })
    {
#>
        #region <#=type #>
    
        /// <summary>
        /// <para>Adds a scalar tag with given <paramref name="key"/> and <#=type #> <paramref name="value"/> to the tags collection.</para>
        /// <para>Conflict resolution (behaviour when a tag with such name already exists) is implementation-specific.</para>
        /// <para>Returned value is utilized solely for the purpose of fluent syntax (chaining calls) and should not return a different instance of <see cref="IHerculesTagsBuilder"/>.</para>
        /// </summary>
        IHerculesTagsBuilder AddValue([NotNull] string key, <#=type #> value);

        /// <summary>
        /// <para>Adds a primitive array tag with given <paramref name="key"/> and <#=type #> <paramref name="values"/> to the tags collection.</para>
        /// <para>Conflict resolution (behaviour when a tag with such name already exists) is implementation-specific.</para>
        /// <para>Returned value is utilized solely for the purpose of fluent syntax (chaining calls) and should not return a different instance of <see cref="IHerculesTagsBuilder"/>.</para>
        /// </summary>
        IHerculesTagsBuilder AddVector([NotNull] string key, [NotNull] IReadOnlyList<<#=type #>> values);

        #endregion

<#
    }
#>
    }
}